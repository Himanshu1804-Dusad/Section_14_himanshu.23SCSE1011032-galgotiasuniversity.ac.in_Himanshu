*******************************************************************************| Leet Code Question - 152 | **************************************************************************************
class Solution {
    public int maxProduct(int[] nums) {
        int max = nums[0], min = nums[0], res = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < 0) { int tmp = max; max = min; min = tmp; }
            max = Math.max(nums[i], max * nums[i]);
            min = Math.min(nums[i], min * nums[i]);
            res = Math.max(res, max);
        }
        return res;
    }
}

*******************************************************************************| Leet Code Question - 121 | **************************************************************************************
class Solution {
    public int maxProfit(int[] prices) {
        int minPrice = Integer.MAX_VALUE;
        int maxProfit = 0;

        for (int price : prices){
            if (price < minPrice) {
                minPrice = price;
            }else if (price - minPrice > maxProfit ){
                maxProfit = price - minPrice;
            }
            
        }
        return maxProfit;
        
    }
}

*********************************************************************************| Leet Code Question - 485 | **************************************************************************************
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int count = 0, maxCount = 0;
        for(int n : nums){
            if( n == 1){
                count++;
                maxCount = Math.max(maxCount,count);

            }else{
                count = 0;
            }
        }
        return maxCount;
        
    }
}
